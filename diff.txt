<?php
// Load Dolibarr environment
$res = 0;
// Try main.inc.php into web root known defined into CONTEXT_DOCUMENT_ROOT (not always defined)
if (!$res && !empty($_SERVER["CONTEXT_DOCUMENT_ROOT"])) {
	$res = @include $_SERVER["CONTEXT_DOCUMENT_ROOT"]."/main.inc.php";
}
// Try main.inc.php into web root detected using web root calculated from SCRIPT_FILENAME
$tmp = empty($_SERVER['SCRIPT_FILENAME']) ? '' : $_SERVER['SCRIPT_FILENAME']; 
$tmp2 = realpath(__FILE__); 
$i = strlen($tmp) - 1; 
$j = strlen($tmp2) - 1;
while ($i > 0 && $j > 0 && isset($tmp[$i]) && isset($tmp2[$j]) && $tmp[$i] == $tmp2[$j]) {
	$i--;
	$j--;
}
if (!$res && $i > 0 && file_exists(substr($tmp, 0, ($i + 1))."/main.inc.php")) {
	$res = @include substr($tmp, 0, ($i + 1))."/main.inc.php";
}
if (!$res && $i > 0 && file_exists(dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php")) {
	$res = @include dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php";
}
// Try main.inc.php using relative path
if (!$res && file_exists("../main.inc.php")) {
	$res = @include "../main.inc.php";
}
if (!$res && file_exists("../../main.inc.php")) {
	$res = @include "../../main.inc.php";
}
if (!$res && file_exists("../../../main.inc.php")) {
	$res = @include "../../../main.inc.php";
}
if (!$res) {
	die("Include of main fails");
}

// Vérifier si la fonction isModEnabled existe (compatibilité)
if (!function_exists('isModEnabled')) {
	function isModEnabled($module)
	{
		global $conf;
		return !empty($conf->$module->enabled);
	}
}

// Load required libraries
require_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';

// Load module specific libraries
dol_include_once('/appmobtimetouch/lib/appmobtimetouch.lib.php');
dol_include_once('/appmobtimetouch/class/timeclockrecord.class.php');
dol_include_once('/appmobtimetouch/class/timeclocktype.class.php');
dol_include_once('/appmobtimetouch/class/weeklysummary.class.php');
dol_include_once('/appmobtimetouch/class/timeclockconfig.class.php');

// Load translations
$langs->loadLangs(array("appmobtimetouch@appmobtimetouch", "users", "companies", "errors"));

// Get parameters
$action = GETPOST('action', 'aZ09');
$view = GETPOST('view','int'); // 1 = today, 2 = this week, 3 = all time
$targetId = "feedMyTimeclock";

// Set default values if not provided
if (empty($view)) $view = 1;

// Security check - vérifier que le module est activé
if (!isModEnabled('appmobtimetouch')) {
    accessforbidden('Module not enabled');
}

// ÉTAPE 3: INITIALISATION COMPLÈTE DES VARIABLES PAR DÉFAUT
// ============================================================

// Variables pour messages et erreurs
$error = 0;
$errors = array();
$message = '';
$messages = array();

// Variables de base pour le time tracking
$is_clocked_in = false;
$clock_in_time = null;
$current_duration = 0;
$active_record = null;
$active_record_id = 0;

// Variables pour les résumés et statistiques
$today_total_hours = 0;
$today_total_breaks = 0;
$weekly_summary = null;
$recent_records = array();

// Variables pour la configuration
$timeclock_types = array();
$default_type_id = 1;
$require_location = 0;
$max_hours_per_day = 12;
$overtime_threshold = 8;
$overtime_alert = false;

// Variables pour les données JavaScript
$js_data = array();

// Vérification de la structure des droits utilisateur (comme dans index.php)
if (!isset($user->rights)) {
    $user->rights = new stdClass();
}

if (!isset($user->rights->appmobtimetouch)) {
    $user->rights->appmobtimetouch = new stdClass();
}

if (!isset($user->rights->appmobtimetouch->timeclock)) {
    $user->rights->appmobtimetouch->timeclock = new stdClass();
    
    // Initialiser tous les droits à false par défaut
    $user->rights->appmobtimetouch->timeclock->read = false;
    $user->rights->appmobtimetouch->timeclock->write = false;
    $user->rights->appmobtimetouch->timeclock->delete = false;
    $user->rights->appmobtimetouch->timeclock->readall = false;
    $user->rights->appmobtimetouch->timeclock->validate = false;
    $user->rights->appmobtimetouch->timeclock->export = false;
    $user->rights->appmobtimetouch->timeclock->config = false;
}

// Security check - vérifier les droits
if (!checkTimeclockPermission($user, 'read')) {
    accessforbidden($langs->trans('NotEnoughPermissions'));
}

// Handle actions from mobile interface
if ($action) {
    if ($action == 'clockin' && checkTimeclockPermission($user, 'write')) {
        $timeclock_type_id = GETPOST('timeclock_type_id', 'int');
        $location = GETPOST('location', 'alphanohtml');
        $latitude = GETPOST('latitude', 'float');
        $longitude = GETPOST('longitude', 'float');
        $note = GETPOST('note', 'restricthtml');

        // Validate required location if configured
        $require_location = getTimeclockConfig($db, 'REQUIRE_LOCATION', 0);
        if ($require_location && (empty($latitude) || empty($longitude))) {
            $error++;
            $errors[] = $langs->trans("LocationRequiredForClockIn");
        }

        if (!$error) {
            $timeclockrecord = new TimeclockRecord($db);
            $result = $timeclockrecord->clockIn($user, $timeclock_type_id, $location, $latitude, $longitude, $note);
            
            if ($result > 0) {
                $messages[] = $langs->trans("ClockInSuccess");
                // Redirect to avoid resubmission
                header('Location: '.$_SERVER['PHP_SELF'].'?clockin_success=1');
                exit;
            } else {
                $error++;
                $errors[] = !empty($timeclockrecord->error) ? $langs->trans($timeclockrecord->error) : $langs->trans("ClockInError");
            }
        }
    }

    if ($action == 'clockout' && checkTimeclockPermission($user, 'write')) {
        $location = GETPOST('location', 'alphanohtml');
        $latitude = GETPOST('latitude', 'float');
        $longitude = GETPOST('longitude', 'float');
        $note = GETPOST('note', 'restricthtml');

        $timeclockrecord = new TimeclockRecord($db);
        $result = $timeclockrecord->clockOut($user, $location, $latitude, $longitude, $note);
        
        if ($result > 0) {
            $messages[] = $langs->trans("ClockOutSuccess");
            // Redirect to avoid resubmission
            header('Location: '.$_SERVER['PHP_SELF'].'?clockout_success=1');
            exit;
        } else {
            $error++;
            $errors[] = !empty($timeclockrecord->error) ? $langs->trans($timeclockrecord->error) : $langs->trans("ClockOutError");
        }
    }
}

// Handle success messages from redirects
if (GETPOST('clockin_success', 'int')) {
    $messages[] = $langs->trans("ClockInSuccess");
}
if (GETPOST('clockout_success', 'int')) {
    $messages[] = $langs->trans("ClockOutSuccess");
}

// ÉTAPE 3: CHARGEMENT SÉCURISÉ DES DONNÉES
// =========================================

try {
    // Get current user's timeclock status using utility function
    $timeclock_status = getTimeclockStatus($user->id, $db);
    $is_clocked_in = $timeclock_status['is_clocked_in'];
    $active_record_id = $timeclock_status['active_record_id'];
    $clock_in_time = $timeclock_status['clock_in_time'];
    $current_duration = $timeclock_status['current_duration'];

    // Load active record details if user is clocked in
    if ($is_clocked_in && $active_record_id > 0) {
        $active_record = new TimeclockRecord($db);
        if ($active_record->fetch($active_record_id) <= 0) {
            // If fetch fails, reset status
            $is_clocked_in = false;
            $active_record = null;
            $active_record_id = 0;
        }
    }

    // Get today's summary using utility function
    $today_summary = getTodayWorkSummary($user->id, $db);
    $today_total_hours = $today_summary['total_hours'];
    $today_total_breaks = $today_summary['total_breaks'];

    // Add active record duration to today's total
    if ($is_clocked_in && $current_duration > 0) {
        $active_duration_hours = $current_duration / 3600; // Convert seconds to hours
        $today_total_hours += $active_duration_hours;
    }

    // Get configuration values
    $overtime_threshold = getTimeclockConfig($db, 'OVERTIME_THRESHOLD', 8);
    $max_hours_per_day = getTimeclockConfig($db, 'MAX_HOURS_PER_DAY', 12);
    $require_location = getTimeclockConfig($db, 'REQUIRE_LOCATION', 0);

    // Calculate overtime alert for today
    $overtime_alert = ($today_total_hours > $overtime_threshold);

    // Get current week summary using utility function
    $current_week_data = getWeeklySummaryForMobile($user->id, $db);
    if ($current_week_data) {
        $weekly_summary = new stdClass();
        $weekly_summary->year = $current_week_data->year;
        $weekly_summary->week_number = $current_week_data->week_number;
        $weekly_summary->total_hours = $current_week_data->total_hours;
        $weekly_summary->total_breaks = $current_week_data->total_breaks;
        $weekly_summary->expected_hours = $current_week_data->expected_hours;
        $weekly_summary->overtime_hours = $current_week_data->overtime_hours;
        $weekly_summary->days_worked = $current_week_data->days_worked;
        $weekly_summary->status = $current_week_data->status;
        
        // Add method for status display
        $weekly_summary->getLibStatut = function($mode = 0) use ($current_week_data) {
            global $langs;
            $statusLabels = array(
                0 => $langs->trans('InProgress'),
                1 => $langs->trans('Completed'),
                2 => $langs->trans('Validated')
            );
            
            $status = isset($statusLabels[$current_week_data->status]) ? $statusLabels[$current_week_data->status] : $langs->trans('Unknown');
            
            if ($mode == 3) {
                $colors = array(0 => 'orange', 1 => 'green', 2 => 'blue');
                $color = isset($colors[$current_week_data->status]) ? $colors[$current_week_data->status] : 'gray';
                return '<span style="color: '.$color.'; font-weight: bold;">'.$status.'</span>';
            }
            
            return $status;
        };
    }

    // Get recent records based on view using utility function
    $date_start = '';
    $date_end = date('Y-m-d');
    $limit = 5;
    
    switch ($view) {
        case 1: // Today
            $date_start = $date_end;
            break;
        case 2: // This week
            $date_start = date('Y-m-d', strtotime('monday this week'));
            break;
        case 3: // All time (last 30 days)
            $date_start = date('Y-m-d', strtotime('-30 days'));
            $limit = 10;
            break;
        default:
            $date_start = $date_end;
            break;
    }
    
    $recent_records_data = getRecentTimeclockRecords($user->id, $db, $limit, $date_start, $date_end);
    
    // Convert to objects for template compatibility
    $recent_records = array();
    foreach ($recent_records_data as $record_data) {
        $record = new stdClass();
        $record->id = $record_data->rowid;
        $record->ref = $record_data->ref;
        $record->clock_in_time = $record_data->clock_in_time;
        $record->clock_out_time = $record_data->clock_out_time;
        $record->work_duration = $record_data->work_duration;
        $record->break_duration = $record_data->break_duration;
        $record->status = $record_data->status;
        $record->location_in = $record_data->location_in;
        $record->location_out = $record_data->location_out;
        $record->note_public = $record_data->note_public;
        $record->fk_timeclock_type = $record_data->fk_timeclock_type;
        
        $recent_records[] = $record;
    }

    // Get available timeclock types using utility function
    $timeclock_types_data = getTimeclockTypesForMobile($db, true);
    
    // Convert to objects for template compatibility
    $timeclock_types = array();
    foreach ($timeclock_types_data as $type_data) {
        $type = new stdClass();
        $type->id = $type_data['id'];
        $type->code = $type_data['code'];
        $type->label = $type_data['label'];
        $type->color = $type_data['color'];
        $type->position = $type_data['position'];
        
        $timeclock_types[] = $type;
    }

    // Set default type ID
    $default_type_id = !empty($timeclock_types) ? $timeclock_types[0]->id : 1;
    
    // Try to get configured default type
    $configured_default = getTimeclockConfig($db, 'DEFAULT_TIMECLOCK_TYPE', 0);
    if ($configured_default > 0) {
        foreach ($timeclock_types as $type) {
            if ($type->id == $configured_default) {
                $default_type_id = $configured_default;
                break;
            }
        }
    }

} catch (Exception $e) {
    // Log error and set safe defaults
    logTimeclockActivity('Error loading data', $e->getMessage(), $user->id);
    $error++;
    $errors[] = $langs->trans("ErrorLoadingData");
}

// ÉTAPE 3: PRÉPARATION DES DONNÉES JAVASCRIPT SÉCURISÉES
// =======================================================

$js_data = array(
    'is_clocked_in' => $is_clocked_in,
    'clock_in_time' => $clock_in_time,
    'require_location' => $require_location,
    'default_type_id' => $default_type_id,
    'max_hours_per_day' => $max_hours_per_day,
    'overtime_threshold' => $overtime_threshold,
    'api_token' => newToken(),
    'user_id' => $user->id,
    'version' => '1.0.4' // Version du module
);

// ÉTAPE 3: FONCTIONS HELPER POUR LE TEMPLATE
// ===========================================

// Fonction helper pour convertir les secondes en format lisible (déjà dans lib)
// Réimportation pour s'assurer qu'elle est disponible
if (!function_exists('convertSecondsToReadableTime')) {
    /**
     * Convert seconds to readable time format
     * 
     * @param int $seconds Number of seconds
     * @return string Formatted time string
     */
    function convertSecondsToReadableTime($seconds) {
        if ($seconds <= 0) return '0h00';
        
        $hours = floor($seconds / 3600);
        $minutes = floor(($seconds % 3600) / 60);
        
        return sprintf('%dh%02d', $hours, $minutes);
    }
}

// Additional helper function for duration formatting
if (!function_exists('formatDuration')) {
    /**
     * Format duration in minutes to readable format
     * 
     * @param int $minutes Duration in minutes
     * @return string Formatted duration
     */
    function formatDuration($minutes) {
        if ($minutes <= 0) return '0h00';
        
        $hours = floor($minutes / 60);
        $mins = $minutes % 60;
        
        return sprintf('%dh%02d', $hours, $mins);
    }
}

// Helper function to create TimeclockType objects for template
if (!class_exists('TimeclockType') && !empty($timeclock_types)) {
    // Create a simple TimeclockType class for template compatibility
    class TimeclockType {
        public $id;
        public $code; 
        public $label;
        public $color;
        
        public function __construct($data = null) {
            if ($data) {
                $this->id = $data->id;
                $this->code = $data->code;
                $this->label = $data->label; 
                $this->color = $data->color;
            }
        }
        
        public function fetch($id) {
            global $timeclock_types;
            foreach ($timeclock_types as $type) {
                if ($type->id == $id) {
                    $this->id = $type->id;
                    $this->code = $type->code;
                    $this->label = $type->label;
                    $this->color = $type->color;
                    return 1;
                }
            }
            return 0;
        }
    }
}

// Set page title
$title = $langs->trans("TimeTracking");

// ÉTAPE 3: VARIABLES DE CONTEXTE POUR LE TEMPLATE
// ===============================================

// S'assurer que toutes les variables nécessaires existent avec des valeurs par défaut
$num_records = count($recent_records);
$pending_validation_count = 0; // Placeholder pour le menu

// Log de l'activité pour debug
logTimeclockActivity('Home page loaded', array(
    'is_clocked_in' => $is_clocked_in,
    'records_count' => $num_records,
    'user_id' => $user->id
), $user->id);

// Include template
include "tpl/home.tpl";
?>