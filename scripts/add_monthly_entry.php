<?php
/**
 * Script pour ajouter une entrée timeclock mensuelle de 140h
 * 
 * Usage: https://domain.com/custom/appmobtimetouch/scripts/add_monthly_entry.php?month=8&user_id=3
 * 
 * Paramètres:
 * - month: Numéro du mois (1-12)
 * - user_id: ID de l'utilisateur
 * - year: Année (optionnel, défaut: année actuelle)
 * 
 * L'entrée démarre le 1er du mois à 00:00:00 et se termine avec une durée de 140h
 * 
 * # Ajouter 140h pour l'utilisateur ID=3 en août 2025
 * https://domain.com/custom/appmobtimetouch/scripts/add_monthly_entry.php?month=8&user_id=3
*
 * # Avec année spécifique 
  *https://domain.com/custom/appmobtimetouch/scripts/add_monthly_entry.php?month=12&user_id=5&year=2024
*
 * # Forcer si des entrées existent déjà
 * https://domain.com/custom/appmobtimetouch/scripts/add_monthly_entry.php?month=8&user_id=3&confirm=yes
 * 
 */

require '../../../main.inc.php';
require_once DOL_DOCUMENT_ROOT.'/custom/appmobtimetouch/class/timeclockrecord.class.php';

// Configuration
define('MONTHLY_HOURS', 140); // Durée en heures

// Security check - only admin can run this
if (!$user->admin) {
    accessforbidden('Admin rights required');
}

// Récupération des paramètres
$month = GETPOST('month', 'int');
$user_id = GETPOST('user_id', 'int');
$year = GETPOST('year', 'int') ?: date('Y'); // Année actuelle par défaut

// Validation des paramètres
if (empty($month) || $month < 1 || $month > 12) {
    print "❌ ERROR: Invalid month parameter. Must be between 1 and 12.\n";
    print "Usage: add_monthly_entry.php?month=8&user_id=3\n";
    exit(1);
}

if (empty($user_id) || $user_id < 1) {
    print "❌ ERROR: Invalid user_id parameter. Must be a positive integer.\n";
    print "Usage: add_monthly_entry.php?month=8&user_id=3\n";
    exit(1);
}

// Vérification que l'utilisateur existe
$sql_user = "SELECT rowid, firstname, lastname, login FROM ".MAIN_DB_PREFIX."user WHERE rowid = ".(int)$user_id." AND statut = 1";
$resql_user = $db->query($sql_user);
if (!$resql_user || $db->num_rows($resql_user) == 0) {
    print "❌ ERROR: User with ID {$user_id} not found or inactive.\n";
    exit(1);
}

$user_obj = $db->fetch_object($resql_user);
$user_name = trim($user_obj->firstname . ' ' . $user_obj->lastname) . ' (' . $user_obj->login . ')';
$db->free($resql_user);

print "=== Adding Monthly Timeclock Entry ===\n";
print "User: {$user_name} (ID: {$user_id})\n";
print "Month: {$month}/{$year}\n";
print "Duration: " . MONTHLY_HOURS . "h\n\n";

// Calcul des dates
$start_date = sprintf('%04d-%02d-01 00:00:00', $year, $month);
$start_timestamp = strtotime($start_date);

// Calcul de la date de fin (140h = 140*3600 secondes)
$duration_seconds = MONTHLY_HOURS * 3600;
$end_timestamp = $start_timestamp + $duration_seconds;
$end_date = date('Y-m-d H:i:s', $end_timestamp);

print "Clock In:  {$start_date}\n";
print "Clock Out: {$end_date}\n";
print "Duration:  " . MONTHLY_HOURS . "h (" . ($duration_seconds/60) . " minutes)\n\n";

// Vérification qu'il n'y a pas déjà une entrée pour ce mois
$sql_check = "SELECT rowid FROM ".MAIN_DB_PREFIX."timeclock_records 
              WHERE fk_user = ".(int)$user_id." 
              AND YEAR(clock_in_time) = ".(int)$year." 
              AND MONTH(clock_in_time) = ".(int)$month;

$resql_check = $db->query($sql_check);
if ($resql_check && $db->num_rows($resql_check) > 0) {
    print "⚠️ WARNING: User {$user_name} already has timeclock entries for {$month}/{$year}\n";
    $existing = $db->fetch_object($resql_check);
    print "Existing entry ID: {$existing->rowid}\n";
    
    $confirm = GETPOST('confirm', 'alpha');
    if ($confirm !== 'yes') {
        print "\nTo proceed anyway, add &confirm=yes to the URL\n";
        exit(0);
    }
    print "Proceeding as requested...\n\n";
}
$db->free($resql_check);

// Création de l'objet TimeclockRecord
$timeclock = new TimeclockRecord($db);

// Configuration de l'entrée
$timeclock->fk_user = $user_id;
$timeclock->clock_in_time = $start_date;
$timeclock->clock_out_time = $end_date;
$timeclock->work_duration = MONTHLY_HOURS * 60; // Durée en minutes
$timeclock->status = 3; // 3 = Completed (clocked out)
$timeclock->fk_timeclock_type = 1; // Type par défaut
$timeclock->location_in = 'Script Generated Entry';
$timeclock->location_out = 'Script Generated Entry';
$timeclock->note_private = 'Monthly entry generated by script - ' . MONTHLY_HOURS . 'h';

// Génération d'une référence unique
$timeclock->ref = 'SCRIPT-' . $year . sprintf('%02d', $month) . '-' . $user_id . '-' . date('His');

// Debug des données avant insertion
dol_syslog("DEBUG AddMonthlyEntry: Creating entry for user {$user_id}, month {$month}/{$year}, duration " . MONTHLY_HOURS . "h", LOG_DEBUG);
dol_syslog("DEBUG AddMonthlyEntry: Clock in: {$start_date}, Clock out: {$end_date}", LOG_DEBUG);

// Création de l'entrée
print "Creating timeclock entry...\n";

$db->begin();

try {
    $result = $timeclock->create($user);
    
    if ($result > 0) {
        $db->commit();
        print "✅ SUCCESS: Timeclock entry created successfully!\n";
        print "Entry ID: {$result}\n";
        print "Reference: {$timeclock->ref}\n";
        print "Duration: " . MONTHLY_HOURS . "h ({$timeclock->work_duration} minutes)\n";
        
        dol_syslog("SUCCESS AddMonthlyEntry: Created entry ID {$result} for user {$user_id}", LOG_INFO);
        
        // Affichage d'un résumé
        print "\n=== Entry Summary ===\n";
        print "User: {$user_name}\n";
        print "Period: {$month}/{$year}\n";
        print "Start: {$start_date}\n";
        print "End: {$end_date}\n";
        print "Total Hours: " . MONTHLY_HOURS . "h\n";
        print "Status: Completed\n";
        print "Reference: {$timeclock->ref}\n";
        
    } else {
        $db->rollback();
        print "❌ ERROR: Failed to create timeclock entry\n";
        print "Error: {$timeclock->error}\n";
        if (!empty($timeclock->errors)) {
            print "Details: " . implode(', ', $timeclock->errors) . "\n";
        }
        
        dol_syslog("ERROR AddMonthlyEntry: Failed to create entry - " . $timeclock->error, LOG_ERR);
        exit(1);
    }
    
} catch (Exception $e) {
    $db->rollback();
    print "❌ EXCEPTION: " . $e->getMessage() . "\n";
    dol_syslog("EXCEPTION AddMonthlyEntry: " . $e->getMessage(), LOG_ERR);
    exit(1);
}

print "\nScript completed successfully!\n";

// Affichage des paramètres pour référence future
print "\n=== Script Usage ===\n";
print "URL: " . $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'] . "\n";
print "Parameters:\n";
print "  - month: {$month} (required, 1-12)\n";
print "  - user_id: {$user_id} (required, valid user ID)\n";
print "  - year: {$year} (optional, defaults to current year)\n";
print "  - confirm: yes (optional, to bypass existing entries warning)\n";
print "\nExample: add_monthly_entry.php?month=8&user_id=3&year=2025\n";
?>